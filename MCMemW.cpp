/*
 ************************************************************************************
 *
 *      File:           MCMemW.cpp
 *      Class:          MCMemW
 *
 ************************************************************************************
 *      Description:
 *
 ************************************************************************************
 *      Notes:
 *
 ************************************************************************************
 *
 *      E/Mail: ian.macallan@gmail.com
 *      (c) 2003 - 2023 / Macallan
 *      
 ************************************************************************************
 *
 */
#include "stdafx.h"
#include "MCMemW.h"

#include <Windows.h>
#include <stdlib.h>


//
//====================================================================================
//
//====================================================================================
MCMemW::MCMemW(void)
{
    len = 0;
    ptr = NULL;
}

//
//====================================================================================
//
//====================================================================================
MCMemW::MCMemW(int sizeInChars )
{
    len = 0;
    ptr = NULL;
    AllocateW ( sizeInChars );
}

//
//====================================================================================
//
//====================================================================================
MCMemW::MCMemW ( const WCHAR *pText, int sizeInChars  )
{
    if ( sizeInChars < 0 )
    {
        sizeInChars = (int) wcslen(pText);
    }

    AllocateW ( sizeInChars );

    memcpy_s ( ptr, len, pText, sizeInChars * sizeof(WCHAR) );
}

//
//====================================================================================
//
//====================================================================================
WCHAR *MCMemW::AllocateW( int sizeInChars )
{
    Free();

    if ( sizeInChars < 8 )
    {
        sizeInChars = 8;
    }
    len = ( sizeInChars + 1 ) * sizeof(WCHAR);
    ptr = (WCHAR*) malloc(len);
    ZeroMemory ( ptr, len );
    return (WCHAR *) ptr;
}

//
//====================================================================================
//
//====================================================================================
void MCMemW::fromPointer( WCHAR *pText, int sizeInChars )
{
    Free();

    len = sizeInChars * sizeof(WCHAR);
    ptr = pText;
}

//
//====================================================================================
//
//====================================================================================
size_t MCMemW::wlen()
{
    if ( len > 0 )
    {
        return (size_t) len / sizeof(WCHAR);
    }

    return 0;
}

//
//====================================================================================
//
//====================================================================================
void MCMemW::Free(void)
{
    if ( ptr != NULL )
    {
        free ( ptr );
        ptr = NULL;
    }
}

//
//====================================================================================
//
//====================================================================================
MCMemW::~MCMemW(void)
{
    Free();
}


