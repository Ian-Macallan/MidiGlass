//
////////////////////////////////////////////////////////////////////////////////////////
// MidiList.cpp: implementation of the CMidiList class.
//
////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "MidiList.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//
////////////////////////////////////////////////////////////////////////////////////////
// Construction/Destruction
//
////////////////////////////////////////////////////////////////////////////////////////
CMidiList::CMidiList(	unsigned char *cOldNN,
						unsigned char *cOldDD,
						unsigned char *cOldTempo, 
						unsigned char *pBuffer,
						unsigned char *oldCommand ) : CMidiPiece ( cOldNN, cOldDD, cOldTempo, pBuffer, oldCommand)
{
	m_pPrevious			= NULL;
	m_pNext				= NULL;
	m_iTrack			= 0;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
CMidiList::CMidiList(		unsigned char			*cOldNN,
							unsigned char			*cOldDD,
							unsigned char			*cOldTempo, 
							unsigned				iEvent, 
							unsigned long			iDelta,
							unsigned				iChannelPort,
							unsigned				iLenText,
							const unsigned char		*pText,
							unsigned char			cVal1, 
							unsigned char			cVal2, 
							unsigned char			cVal3, 
							unsigned char			cVal4, 
							unsigned char			cVal5, 
							unsigned char			cVal6 ) : 
			CMidiPiece (	cOldNN,		cOldDD,		cOldTempo,
							iEvent,		iDelta,		iChannelPort,	
							iLenText,	pText,
							cVal1,		cVal2,		cVal3, 
							cVal4,		cVal5, 		cVal6 )
{
	m_pPrevious			= NULL;
	m_pNext				= NULL;
	m_iTrack			= 0;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//	Copy Constructor
////////////////////////////////////////////////////////////////////////////////////////
CMidiList::CMidiList (	const CMidiList &midiList ) : CMidiPiece ( midiList )
{
	m_pPrevious			= NULL;
	m_pNext				= NULL;
	m_iTrack			= 0;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//	Copy Constructor
////////////////////////////////////////////////////////////////////////////////////////
CMidiList::CMidiList (	const CMidiList *midiList ) : CMidiPiece ( midiList )
{
	m_pPrevious			= NULL;
	m_pNext				= NULL;
	m_iTrack			= 0;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//	Private Constructor
////////////////////////////////////////////////////////////////////////////////////////
CMidiList::CMidiList ( ) : CMidiPiece ( )
{
	m_pPrevious			= NULL;
	m_pNext				= NULL;
	m_iTrack			= 0;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
CMidiList::~CMidiList()
{
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
CMidiList * CMidiList::newEmptyMidiList()
{
	CMidiList *pMidiList = new CMidiList();
	return pMidiList;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
void CMidiList::SetPrevious(CMidiList *pPrevious)
{
	m_pPrevious		= pPrevious;		
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
void CMidiList::SetNext(CMidiList *pNext)
{
	m_pNext			= pNext;		
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
unsigned char *CMidiList::GetNextAddress () const
{
	if ( m_pMidiEvent != NULL )
	{
		return ( m_pMidiEvent->GetEndOfBufferAddress () );
	}

	return ( NULL );
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
CMidiList *CMidiList::GetNext () const
{
	return m_pNext;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
unsigned int CMidiList::GetEventIndex() const
{
	if ( m_pMidiEvent != NULL )
	{
		return ( m_pMidiEvent->GetEventIndex () );
	}

	return ( 0 );
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
CMidiList * CMidiList::GetPrevious() const
{
	return m_pPrevious;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//		Delete The current MidiList
//		Must Be delete outsize
////////////////////////////////////////////////////////////////////////////////////////
void CMidiList::RemoveFromList( bool bAdjust )
{
	unsigned long		iTime;

	//	Get delta time.
	iTime = GetDeltaTime ();

	//	If there is a previous set the next for this
	//	previous to the next of current item
	if ( m_pPrevious != NULL )
	{
		m_pPrevious->SetNext ( m_pNext );
	}

	//	If there is a next set the previous for this
	//	next to the previous of current item
	if ( m_pNext != NULL )
	{
		m_pNext->SetPrevious ( m_pPrevious );
		if ( bAdjust )
		{
			m_pNext->AddDeltaTime ( iTime );
		}
	}


	//	Reset pointers to avoid cascade deletion
	m_pNext		= NULL;
	m_pPrevious = NULL;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//		Swap An Item with current
//		P0 <-> C <-> P1 <-> O <-> P2
//		P0 <-> O <-> P1 <-> C <-> P2
////////////////////////////////////////////////////////////////////////////////////////
void CMidiList::Swap(CMidiList *pOtherMidiList)
{
	CMidiList *pPrevious	= m_pPrevious;
	CMidiList *pNext		= m_pNext;

	//	The Previous of Current will be the Previous if the Other
	SetPrevious ( pOtherMidiList->GetPrevious() );
	//	The Next of current Current will be the Next if the Other
	SetNext ( pOtherMidiList->GetNext() );

	//	The Previous of other will be the Previous if the Current
	pOtherMidiList->SetPrevious ( pPrevious );
	//	The Next of other will be the Previous if the Current
	pOtherMidiList->SetNext ( pNext );
}

//
////////////////////////////////////////////////////////////////////////////////////////
//		Insert After The current MidiList
////////////////////////////////////////////////////////////////////////////////////////
void CMidiList::InsertAfter(CMidiList *pMidiNewList)
{
	//	m_pPrevious	unchanged
	CMidiList *pPrevious	= m_pPrevious;

	//	m_pNext will be the new MidiList
	CMidiList *pNext		= m_pNext;

	//	Change The Current
	m_pNext = pMidiNewList;

	//	Set The Inserted 
	pMidiNewList->SetPrevious ( this );
	pMidiNewList->SetNext ( pNext );

	//	Change The Next 
	if ( pNext != NULL )
	{
		pNext->SetPrevious ( pMidiNewList );
	}
}

//
////////////////////////////////////////////////////////////////////////////////////////
//		Insert before The current MidiList
////////////////////////////////////////////////////////////////////////////////////////
void CMidiList::InsertBefore(CMidiList *pMidiNewList)
{
	//	m_pPrevious will be the new MidiList
	CMidiList *pPrevious	= m_pPrevious;

	//	Next will be unchanged
	CMidiList *pNext		= m_pNext;

	//	Change the previous to point on new item
	if ( pPrevious != NULL )
	{
		pPrevious->SetNext( pMidiNewList );
	}

	//	Change The Current to savy the previous is the new item
	m_pPrevious = pMidiNewList;

	//	Set The Inserted
	pMidiNewList->SetPrevious ( pPrevious );
	pMidiNewList->SetNext ( this );
}

//
////////////////////////////////////////////////////////////////////////////////////////
//		Replace The current MidiList
////////////////////////////////////////////////////////////////////////////////////////
void CMidiList::ChangeCurrent(CMidiList *pMidiNewList)
{
	pMidiNewList->SetPrevious ( m_pPrevious );
	pMidiNewList->SetNext ( m_pNext );

	//
	//	Change the previous to point to current
	if ( m_pPrevious != NULL )
	{
		m_pPrevious->SetNext( pMidiNewList );
	}

	if ( m_pNext != NULL )
	{
		m_pNext->SetPrevious ( pMidiNewList );
	}

	//	Reset pointers to avoid cascade deletion
	m_pNext		= NULL;
	m_pPrevious = NULL;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
void CMidiList::SetTrack( int iTrack )
{
	m_iTrack = iTrack;
}

//
////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////
int CMidiList::GetTrack( ) const
{
	return m_iTrack;
}