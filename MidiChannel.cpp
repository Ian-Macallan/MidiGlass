// MidiChannel.cpp: implementation of the CMidiChannel class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "MidiChannel.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//
///////////////////////////////////////////////////////////////////////////////////////////
// Construction/Destruction
//
///////////////////////////////////////////////////////////////////////////////////////////
CMidiChannel::CMidiChannel()
{
	Init ( );
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
CMidiChannel::~CMidiChannel()
{

}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::Init()
{
	m_iChannel			= 0;
	m_bMuted			= false;
	m_iProgram			= 0;
	m_bProgramSet		= false;
	m_iVolume			= 0;
	m_bVolumeSet		= false;
	m_cCurrentVolume	= 0;
	m_cCurrentNote		= 0;
	m_SF2_file			= "";
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::SetChannel(int iChannel)
{
	m_iChannel = iChannel;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
int CMidiChannel::GetChannel() const
{
	return m_iChannel;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::SetMuteState(bool bMute)
{
	m_bMuted = bMute;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
bool CMidiChannel::GetMuteState() const
{
	return m_bMuted;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::SetProgram(unsigned char iProgram)
{
	m_iProgram		= iProgram;
	m_bProgramSet	= true;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
bool CMidiChannel::IsProgramSet() const
{
	return m_bProgramSet;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
unsigned char CMidiChannel::GetProgram() const
{
	return m_iProgram;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
bool CMidiChannel::GetVolume(unsigned char *cVolume) const
{
	*cVolume = m_iVolume;
	return m_bVolumeSet;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
bool CMidiChannel::IsVolumeSet() const
{
	return m_bVolumeSet;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::SetVolume(unsigned char cVolume)
{
	m_iVolume		= cVolume;
	m_bVolumeSet	= true;
}


//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::SetCurrentNoteAndVolume( DWORD dwChunk )
{
	dwChunk = dwChunk >> 8;
	m_cCurrentNote		= ( unsigned char ) ( dwChunk & 0xff );
	dwChunk = dwChunk >> 8;
	m_cCurrentVolume	= max ( m_cCurrentVolume, ( unsigned char ) ( dwChunk & 0xff ) );
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::GetCurrentNoteAndVolume(unsigned char *cNote, unsigned char *cVolume) const
{
	*cNote				= m_cCurrentNote;
	*cVolume			= m_cCurrentVolume;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::ResetVolume()
{
	m_cCurrentVolume = m_cCurrentVolume >> 1;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
const char *CMidiChannel::GetSF2File()
{
	return m_SF2_file;
}

//
///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////
void CMidiChannel::SetSF2File( const char *sf2file)
{
	m_SF2_file = sf2file;
}
