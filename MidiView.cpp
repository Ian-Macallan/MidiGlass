// MidiView.cpp : implementation file
//

#include "stdafx.h"
#include "MidiGlassApp.h"
#include "MidiView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

//
///////////////////////////////////////////////////////////////////////////////////
// CMidiView
//
///////////////////////////////////////////////////////////////////////////////////
IMPLEMENT_DYNCREATE(CMidiView, CView)

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
CMidiView::CMidiView()
{
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
CMidiView::~CMidiView()
{
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
BEGIN_MESSAGE_MAP(CMidiView, CView)
	//{{AFX_MSG_MAP(CMidiView)
		// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
	ON_WM_MOVE()
	ON_WM_SIZE()
END_MESSAGE_MAP()

//
///////////////////////////////////////////////////////////////////////////////////
// CMidiView drawing
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiView::OnDraw(CDC* pDC)
{
	CMidiDoc *pMididoc	= dynamic_cast< CMidiDoc * >( GetDocument () );
}

//
///////////////////////////////////////////////////////////////////////////////////
// CMidiView diagnostics
//
///////////////////////////////////////////////////////////////////////////////////
#ifdef _DEBUG
void CMidiView::AssertValid() const
{
	CView::AssertValid();
}

void CMidiView::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}
#endif //_DEBUG

//
///////////////////////////////////////////////////////////////////////////////////
// CMidiView message handlers
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiView::OnInitialUpdate() 
{
	CView::OnInitialUpdate();
	
	// TODO
	CMainFrame			*hMainFrame;

	hMainFrame = dynamic_cast< CMainFrame * >( AfxGetMainWnd() );

	if ( hMainFrame->GetMidiView () == NULL )
	{
		hMainFrame->SetMidiView ( this );

		//		Now create all view
		CCreateContext	tagContext;

		//		Get the active document.
		tagContext.m_pCurrentDoc		= GetDocument ( );

		//		Fills context variables
		tagContext.m_pLastView			= NULL;
		tagContext.m_pNewDocTemplate	= NULL;
		tagContext.m_pNewViewClass		= NULL;

		//		Create the views
		tagContext.m_pCurrentFrame		= NULL;

		hMainFrame->CreateViewWindows ( NULL, &tagContext );
	}	
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiView::OnActivateView(BOOL bActivate, CView* pActivateView, CView* pDeactiveView) 
{
	// TODO
	
	CView::OnActivateView(bActivate, pActivateView, pDeactiveView);
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiView::OnMove(int x, int y)
{
	CView::OnMove(x, y);

#if 0
	EnableScrollBarCtrl(SB_BOTH, FALSE);

	RECT	clientRect;
	GetClientRect ( &clientRect );

	if ( m_Rich_Edit.m_hWnd != NULL )
	{
		m_Rich_Edit.MoveWindow ( &clientRect, true );
	}
#endif
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiView::OnSize(UINT nType, int cx, int cy)
{
	CView::OnSize(nType, cx, cy);

#if 0
	EnableScrollBarCtrl(SB_BOTH, FALSE);

	RECT	clientRect;
	GetClientRect ( &clientRect );

	if ( m_Rich_Edit.m_hWnd != NULL )
	{
		m_Rich_Edit.MoveWindow ( &clientRect, true );
	}
#endif
}
