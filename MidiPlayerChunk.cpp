// MidiPlayerChunk.cpp: implementation of the CMidiPlayerChunk class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "MidiPlayerChunk.h"
#include "MidiEvent.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//
///////////////////////////////////////////////////////////////////////////////////
// Construction/Destruction
//
///////////////////////////////////////////////////////////////////////////////////
CMidiPlayerChunk::~CMidiPlayerChunk()
{
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
CMidiPlayerChunk * CMidiPlayerChunk::GetNext() const
{
	return m_pNext;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
CMidiPlayerChunk * CMidiPlayerChunk::GetPrevious() const
{
	return m_pPrevious;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
CMidiPlayerChunk::CMidiPlayerChunk()
{
	m_pNext				= NULL;
	m_pPrevious			= NULL;

	m_iType				= MIDI_EVENT_UNKNOWN;

	m_iHMSm				= 0;
	m_iDelta			= 0;

	m_DwordChunk		= 0;
	m_DwordShortChunk	= 0;
	memset ( &m_SysexChunk, 0, sizeof ( m_SysexChunk ) );
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
CMidiPlayerChunk::CMidiPlayerChunk (	unsigned int iType, CMidiPlayerChunk *pPrevious, CMidiPlayerChunk *pNext, 
										unsigned long iHMSm, unsigned long iDelta, MIDIHDR *pSysexChunk )
{
	m_pNext				= pNext;
	m_pPrevious			= pPrevious;

	m_iType				= iType;

	m_iHMSm				= iHMSm;

	//		Just a test
	m_iDelta			= iDelta;

	m_DwordChunk		= 0;
	m_DwordShortChunk	= 0;
	m_SysexChunk		= *pSysexChunk;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
CMidiPlayerChunk::CMidiPlayerChunk (	unsigned int iType, CMidiPlayerChunk *pPrevious, CMidiPlayerChunk *pNext, 
										unsigned long iHMSm, unsigned long iDelta,
										DWORD dwDwordChunk, unsigned char iChan, int iTrack )
{
	m_pNext				= pNext;
	m_pPrevious			= pPrevious;

	m_iType				= iType;

	m_iHMSm				= iHMSm;

	//		Just a test
	m_iDelta			= iDelta;

	m_iChannel			= iChan;

	m_iTrack			= iTrack;

	memset ( &m_SysexChunk, 0, sizeof ( m_SysexChunk ) );
	m_DwordChunk		= dwDwordChunk;
	m_DwordShortChunk	= dwDwordChunk;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiPlayerChunk::SetNext( CMidiPlayerChunk *pNext )
{
	m_pNext				= pNext;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiPlayerChunk::SetPrevious( CMidiPlayerChunk *pPrevious )
{
	m_pPrevious			= pPrevious;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
unsigned CMidiPlayerChunk::GetValues (	unsigned long *iHMSm, unsigned long *iDelta,
										DWORD *pDwordChunk, MIDIHDR *pSysexChunk, 
										unsigned char *iChan, int *iTrack, bool bShort ) const
{
	*iHMSm				= m_iHMSm;
	*iDelta				= m_iDelta;
	if ( bShort )
	{
		*pDwordChunk	= m_DwordShortChunk;
	}
	else
	{
		*pDwordChunk	= m_DwordChunk;
	}
	*pSysexChunk		= m_SysexChunk;
	*iChan				= m_iChannel;
	*iTrack				= m_iTrack;
	return m_iType;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiPlayerChunk::SkipCode()
{
	m_DwordShortChunk = m_DwordChunk >> 8;
}

//
//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiPlayerChunk::SetDwordChunk(DWORD dwChunk)
{
	m_DwordChunk		= dwChunk;
	m_DwordShortChunk	= dwChunk;

	m_iType				= GetIndex ( m_DwordChunk );

	m_iChannel			= ( unsigned char ) ( m_DwordChunk & CHANNEL_MASK );

	m_iTrack			= 0;

}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
void CMidiPlayerChunk::SetMidiHdrChunk(MIDIHDR *pChunk)
{
	m_SysexChunk		= *pChunk;
}

//	Byte 0 : is eventcode | channel
//		Event Code	0x80 noteoff	0x90 noteon		0xa0 pressure
//					0xb0 parameter	0xc0 program	0xd0 channel pressure
//					0xe0 wheel
//	Byte 1 ; the note
//	Byte 3 : velocity
//	Byte 4 : nothing
DWORD CMidiPlayerChunk::GetDwordChunk() const
{
	return m_DwordChunk;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
unsigned char CMidiPlayerChunk::GetChannel() const
{
	return m_iChannel;
}

//
///////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////
int CMidiPlayerChunk::GetTrack() const
{
	return m_iTrack;
}
